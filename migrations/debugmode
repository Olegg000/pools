const ERC20 = artifacts.require("ERC20");
const Factory = artifacts.require("Factory");
const Pool = artifacts.require("Pool");
const Staking = artifacts.require("Staking");
const Router = artifacts.require("Router");
const users = require("../users");
const fs = require('fs');

module.exports = async function (deployer) {


    // деплой токенов и минт непосредственно
    await deployer.deploy(ERC20,"GerdaCoin","GERDA",12);
    const gerda = await ERC20.deployed();
    await gerda.mint(users.Owner.address,100000);

    await deployer.deploy(ERC20,"KrendelCoin","KRENDEL",12);
    const krendel = await ERC20.deployed();
    await krendel.mint(users.Owner.address,150000);

    await deployer.deploy(ERC20,"RTKCoin","RTK",12);
    const rtk = await ERC20.deployed();
    await rtk.mint(users.Owner.address,300000);

    await deployer.deploy(ERC20,"LPToken","LP",12);
    const LP = await ERC20.deployed();


    // console.log("     -------       ");
    //
    // // первое действие демонстрации решения - от имени владельца
    // // распределяем пользователем том и бен по 10 000 всех токенов
    // // await gerda.transfer(users.Tom.address, 10000,{from:users.Owner.address});
    // // await krendel.transfer(users.Tom.address, 10000,{from:users.Owner.address});
    // // await rtk.transfer(users.Tom.address, 10000,{from:users.Owner.address});
    // //
    // // await gerda.transfer(users.Ben.address, 10000,{from:users.Owner.address});
    // // await krendel.transfer(users.Ben.address, 10000,{from:users.Owner.address});
    // // await rtk.transfer(users.Ben.address, 10000,{from:users.Owner.address});
    // //
    // // console.log(await gerda.balanceOf(users.Ben.address) + " " + await gerda.balanceOf(users.Tom.address))
    //
    //
    // console.log("     -------       ");

    // инициализация фактори
    await deployer.deploy(Factory,6,LP.address);
    const factory = await Factory.deployed();
    // ВАЖНО: передаем владение лп токена фактори чтобы остальные пулы могли минтить токены

    await LP.changeOwnership(factory.address);
    await factory.createPool(gerda.address, krendel.address,{ from: users.Tom.address });
    await factory.createPool(krendel.address,rtk.address,{ from: users.Ben.address });
    console.log("Pool addresses: " + await factory.getAllPool() + "^");
    const createPools = await factory.getAllPool()

    // инициализация первого пула в фабрике (владелец тут том)
    const pool1 = await Pool.at(createPools[0]);
    await gerda.approve(createPools[0],1500,{ from: users.Owner.address })
    await krendel.approve(createPools[0],1500,{ from: users.Owner.address })
    await pool1.liquidityTokenAdd(1500,1, { from: users.Owner.address })
    await pool1.liquidityTokenAdd(1500,2, { from: users.Owner.address })
    const po1 = await pool1.reversesToken1();
    const po2 = await pool1.reversesToken2();
    console.log("Reserves Pool1: " + po1.toString() + po2.toString());

    // инициализация второго пула в ф   абрике (владелец тут бен)
    const pool2 = await Pool.at(createPools[1]);
    await krendel.approve(createPools[1],3000,{ from: users.Owner.address })
    await rtk.approve(createPools[1],3000,{ from: users.Owner.address })
    await pool2.liquidityTokenAdd(3000,1, { from: users.Owner.address })
    await pool2.liquidityTokenAdd(3000,2, { from: users.Owner.address })
    const poo1 = await pool2.reversesToken1();
    const poo2 = await pool2.reversesToken2();
    console.log("Reserves Pool2: " + poo1.toString() + poo2.toString());

    // вывод владельцев пулов
    console.log("Pool 1 owner: " + await pool1.owner() + " Pool2 owner: " + await pool2.owner());

    // деплой стакинга и роутера
    await deployer.deploy(Router,await factory.address);
    const router = await Router.deployed();

    await deployer.deploy(Staking)
    const staking = await Staking.deployed();

    // сохранение адрессов важных контрактов в файл
    const data = {
        factoryAddress: factory.address,
        stakingAddress: staking.address,
        routerAddress: router.address,
    };
    await fs.writeFileSync("./MainAddresses.json", JSON.stringify(data, null, 2));
}